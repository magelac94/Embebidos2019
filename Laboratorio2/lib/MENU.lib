#use Utilities.lib
#use RTC.lib

/*** BeginHeader */
// Librerias a incluir
// Definicion de macros
// Definicion de estructuras
enum opcionMenu {
	OPCION_1 = 1,
	OPCION_2,
	OPCION_3,
	OPCION_4,
	OPCION_5
};

char auxiliarParaDatosEventos[2];
/*** EndHeader */

// Metodos

/*int bisiesto(ano){
	return ((ano % 4 == 0 && ano % 100 != 0) || ano % 400   == 0);
}
             */
             /*
bool validarano( char ano);
bool validarano( char ano){
	while(1){
		if (ano > "1900" && ano < "5000"){
			return true;
		}
	}
}

bool validarmes( char mes);
bool validarmes( char mes){
	while(1){
		if (mes > "0" && ano < "13"){
			return true;
		}
	}
}

bool validardia( char dia, char mes, char ano);
bool validardia( char dia, char mes, char ano){
	while(1){
		if (mes == '4' || mes== '6' || mes == '9' || mes == "11"){
			if (dia > 0 && dia < 31){
				return true;
			}
		}
		if (mes == '2'){
			if (bisiesto(ano)){
				if (dia > 0 && dia < 30){
					return true;
				}
			}else{
				if (dia > 0 && dia < 29){
					return true;
				}
			}


		}
		else {
			if (dia > 0 && dia < 32){
				return true;
			}
		}
	}
}

bool validarhora( char hora);
bool validarhora( char hora){
	while(1){
		if (hora > "0" && hora < "25"){
			return true
		}
	}
}

bool validarminuto( char minuto);
bool validarminuto( char minuto){
	while(1){
		if (minuto > "0" && minuto < "60"){
			return true;
		}
	}
}
     */

/*** BeginHeader MENU_mostrarMenuPrincipal */
void MENU_mostrarMenuPrincipal();   //char* p_opcion
/*** EndHeader */
void MENU_mostrarMenuPrincipal(){       // char* p_opcion
	printf("\n          Elija una opcion\n");
	printf("-----------------------------------------\n");
	printf(" 1 - Fijar la hora del reloj\n");
	printf(" 2 - Consultar la hora del reloj\n");
	printf(" 3 - Agregar evento del calendario\n");
	printf(" 4 - Quitar evento del calendario\n");
	printf(" 5 - Consultar lista de eventos activos\n");
	printf(" 6 - Salir\n\n");
	printf(" >> ");
 //  waitfor(getswf(p_opcion));
	//gets( p_opcion );
}



/*** BeginHeader MENU_pedirFechaHora */
void MENU_pedirFechaHora();
/*** EndHeader */
void MENU_pedirFechaHora(){   // devolver el struct
	struct tm* pp_FechaHora;
 /*  struct tm* p_FechaHora{
   char dia;
   char mes;
   char ano;
   char hora;
   char minuto;
}; */

   pp_FechaHora->tm_hour = 1;
	pp_FechaHora->tm_min = 23;
	pp_FechaHora->tm_mday = 6;
	pp_FechaHora->tm_mon = 4;
	pp_FechaHora->tm_year = 19;
	printf("-------- CONFIGURACION: FIJAR HORA -------\n");

	printf(" Ingrese el ano: ");
 //	gets( ano );
	//validarano(ano);

	printf(" Ingrese el mes: ");
 //	gets( mes );
 //	validarmes(mes);

	printf(" Ingrese el dia: ");
 //	gets( dia );
//	validardia(dia,mes,ano);

	printf(" Ingrese el hora: ");
 //	gets( hora );
 //	validarhora(hora);

	printf(" Ingrese el minuto: ");
 //	gets( minuto );
  //	validarminuto(minuto);
  /*
	// ojo esta todo en char
	p_FechaHora->tm_hour = hora;
	p_FechaHora->tm_min = minuto;
	p_FechaHora->tm_mday =dia;
	p_FechaHora->tm_mon = mes;
	p_FechaHora->tm_year = ano;

	/*

	p_FechaHora->tm_hour = 1;
	p_FechaHora->tm_min = 23;
	p_FechaHora->tm_mday = 6;
	p_FechaHora->tm_mon = 4;
	p_FechaHora->tm_year = 19;*/
   //RTC_fijarFechaHora( p_FechaHora ); // ESto anda si en el test pero aca no anda por eso esta comentado
   printFechaHora( pp_FechaHora );		// Imprimo la Fecha y hora modificados

  // return pp_FechaHora;
}

/*** BeginHeader MENU_consultarHora */
cofunc void MENU_consultarHora();
/*** EndHeader */
cofunc void MENU_consultarHora(){
	printf("\n-------- CONFIGURACION: CONSULTAR HORA ACTUAL -------\n");
}

/*** BeginHeader MENU_pedirDatosEvento */
char MENU_pedirDatosEvento();
/*** EndHeader */
char MENU_pedirDatosEvento(){
	char evento;
	char led;
	struct tm* hora;	// verificar
	while(1){
		printf("\n-------- CONFIGURACION: AGREGAR EVENTO -------\n");
		printf("Tipo de Evento (1-Encender o 2-Apagar):\n");
		getswf(evento);
		if (evento < 0 || evento > 1){
			printf("Debe elegir 1 o 2, volver a ingresar\n");
		}else{
			printf("Led a Encender(0-6):\n");
			getswf(led);
			if (led < 0 || led > 6){
					printf("Debe elegir un numero entre  0 y 6");
			}else{
					hora = MENU_pedirHoraFecha();  // tiene que dar un stuct de la horaFecha para ele evento, falta resolver que pedirHoraFecha devuelva eso.
				}else{		// Guardo los datos del evento en un array para ser procesado por EVENTOS

					auxiliarParaDatosEventos[0] = evento;
					auxiliarParaDatosEventos[1] = led;
					auxiliarParaDatosEventos[2] = hora;

					return auxiliarParaDatosEventos;
}

/*** BeginHeader MENU_eliminarEvento */
cofunc int MENU_eliminarEvento();
/*** EndHeader */
cofunc int MENU_eliminarEvento(){
	char numEvento[2];
	while(1){		
		printf("-------- CONFIGURACION: ELIMINAR EVENTO -------\n");
		printf("Para eliminar ingrese numero de evento (0 para listar los eventos):\n");
		waitfor(getswf( numEvento ));
		printf("EVENTO ELEGIDO: --- %s ---- \n",&numEvento[0]);
		if (numEvento[0] == '0'){
			EVENTOS_listarEventos();
		}else{
			if (numEvento[0] > 0 && numEvento[0] < MAX_EVENTS ){
				return numEvento[0]-1;
			}else{
				printf("Numero de Evento Incorrecto \n");
			}
		}

	}

}

/*** BeginHeader MENU_consultarEventos */
cofunc void MENU_consultarEventos();
/*** EndHeader */
cofunc void MENU_consultarEventos(){
	printf("-------- CONFIGURACION: LISTAR EVENTOS -------\n");
}