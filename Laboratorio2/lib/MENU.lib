/*** BeginHeader */
// Definicion de estructuras
enum opcionMenu {
	OPCION_1 = 1,
	OPCION_2,
	OPCION_3,
	OPCION_4,
	OPCION_5
};

char auxiliarParaDatosEventos[2];
/*** EndHeader */

// Metodos

/*** BeginHeader MENU_mostrarMenuPrincipal */
void MENU_mostrarMenuPrincipal();   //char* p_opcion
/*** EndHeader */
void MENU_mostrarMenuPrincipal(){       // char* p_opcion
	printf("\n\n\n          Elija una opcion\n");
	printf("-----------------------------------------\n");
	printf(" 1 - Fijar la hora del reloj\n");
	printf(" 2 - Consultar la hora del reloj\n");
	printf(" 3 - Agregar evento del calendario\n");
	printf(" 4 - Quitar evento del calendario\n");
	printf(" 5 - Consultar lista de eventos activos\n");
	printf(" 6 - Salir\n\n");
	printf(" >> ");
}


/*** BeginHeader MENU_pedirFechaHora */
cofunc void MENU_pedirFechaHora( struct tm* p_FechaHora );
/*** EndHeader */
 /*  struct tm {
		char tm_sec; // seconds 0-59
		char tm_min; // 0-59
		char tm_hour; // 0-23
		char tm_mday; // 1-31
		char tm_mon; // 1-12
		char tm_year; // 80-147 (1980-2047)
		char tm_wday; // 0-6 0==sunday
};
}; */
cofunc void MENU_pedirFechaHora( struct tm* p_FechaHora ){   // devolver el struct
	char temp[10];

   int int_temp;

	printf("\n\n-------- CONFIGURACION: FIJAR HORA -------\n");
	printf(" Ingrese el anio: ");
	waitfor( getswf( temp ));
   // Convertimos a int
   int_temp = atoi( temp );
   printf("\nDEBUG: El valor de int_anio es: %d", int_temp);
   int_temp = ( int_temp - 1900 ); // char tm_year; 80-147 (1980-2047)
   printf("\nDEBUG: El valor de int_anio ahora es: %d", int_temp);
   p_FechaHora->tm_year = (char)int_temp;

	printf("\n Ingrese el mes: ");
	waitfor( getswf( temp ));
   // Convertimos a int
   int_temp = atoi( temp );
   printf("\nDEBUG: El valor de int_mes es: %d", int_temp);
	p_FechaHora->tm_mon = (char)int_temp;

	printf("\n Ingrese el dia: ");
	waitfor( getswf( temp ));
   // Convertimos a int
   int_temp = atoi( temp );
   p_FechaHora->tm_mday = (char)int_temp;

	printf("\n Ingrese el hora: ");
	waitfor( getswf( temp ));
   // Convertimos a int
   int_temp = atoi( temp );
   p_FechaHora->tm_hour = (char)int_temp;

	printf("\n Ingrese el minuto: ");
	waitfor( getswf( temp ));
   // Convertimos a int
   int_temp = atoi( temp );
   p_FechaHora->tm_min = (char)int_temp;
}

/*** BeginHeader MENU_consultarHora */
cofunc void MENU_consultarHora();
/*** EndHeader */
cofunc void MENU_consultarHora(){
	printf("\n\n-------- CONSULTAR HORA ACTUAL -------\n");
}

/*** BeginHeader MENU_pedirDatosEvento */
cofunc void MENU_pedirDatosEvento( Event* e );
/*** EndHeader */
cofunc void MENU_pedirDatosEvento( Event* e ){
	char tipoevento[10], *p_tipoevento;
   char led[10], *p_led;
   int int_tipoevento, int_led;
   struct tm* p2_FechaHora;
   unsigned long timestamp;

   p_tipoevento = &tipoevento[0];
   p_led = &led[0];

	while(1){
		printf("\n-------- CONFIGURACION: AGREGAR EVENTO -------\n");
		printf("Tipo de Evento (1-Encender o 2-Apagar):\n");
		waitfor(getswf( p_tipoevento ));
      int_tipoevento = atoi(p_tipoevento);
		if ( int_tipoevento < 0 || int_tipoevento > 1){
			printf("Debe elegir 1 o 2, volver a ingresar\n");
		}
      else{
			printf("Led a Encender(0-7):\n");
			waitfor(getswf( p_led ));
         int_led = atoi( p_led );
			if ( int_led < 0 || int_led > 7){
				printf("Debe elegir un numero entre  0 y 7\n");
			}
         else{
				wfd MENU_pedirFechaHora( p2_FechaHora );  // tiene que dar un stuct de la horaFecha para ele evento, falta resolver que pedirHoraFecha devuelva eso.
            printf("DEBUG: Se ejecuto pedirFechaHora");
            timestamp = mktime( p2_FechaHora );
            printFechaHora( p2_FechaHora );
            e->command = *p_tipoevento;
            e->param = *p_led;
            e->time = timestamp;
            return;
         }
      }
   }
}

/*** BeginHeader MENU_eliminarEvento */
cofunc int MENU_eliminarEvento();
/*** EndHeader */
cofunc int MENU_eliminarEvento(){
	char numEvento[2];
	while(1){
		printf("-------- CONFIGURACION: ELIMINAR EVENTO -------\n");
		printf("Para eliminar ingrese numero de evento (0 para listar los eventos): \n");
		waitfor(getswf( numEvento ));
		printf("EVENTO ELEGIDO: --- %s ---- \n",&numEvento[0]);
		if (numEvento[0] == '0'){
			EVENTOS_listarEventos();
		}else{
			if (numEvento[0] > 0 && numEvento[0] < MAX_EVENTS ){
				return numEvento[0]-1;
			}else{
				printf("Numero de Evento Incorrecto \n");
			}
		}

	}

}

/*** BeginHeader MENU_consultarEventos */
cofunc void MENU_consultarEventos();
/*** EndHeader */
cofunc void MENU_consultarEventos(){
	printf("-------- CONFIGURACION: LISTAR EVENTOS -------\n");
}








/*
int bisiesto(char p_ano){
	return ((ano % 4 == 0 && ano % 100 != 0) || ano % 400   == 0);
}

//bool validarano( char ano);
bool validarano( char p_ano ){
	while(1){
		if ( p_ano > "1900" && ano < "5000"){
			return true;
		}
	}
}


//bool validarmes( char mes);
bool validarmes( char mes){
	while(1){
		if (mes > "0" && ano < "13"){
			return true;
		}
	}
}

//bool validardia( char dia, char mes, char ano);
bool validardia( char dia, char mes, char ano){
	while(1){
		if (mes == '4' || mes== '6' || mes == '9' || mes == "11"){
			if (dia > 0 && dia < 31){
				return true;
			}
		}
		if (mes == '2'){
			if (bisiesto(ano)){
				if (dia > 0 && dia < 30){
					return true;
				}
			}else{
				if (dia > 0 && dia < 29){
					return true;
				}
			}


		}
		else {
			if (dia > 0 && dia < 32){
				return true;
			}
		}
	}
}

//bool validarhora( char hora);
bool validarhora( char hora){
	while(1){
		if (hora > "0" && hora < "25"){
			return true;
		}
	}
}

//bool validarminuto( char minuto);
bool validarminuto( char minuto){
	while(1){
		if (minuto > "0" && minuto < "60"){
			return true;
		}
	}
}  */