// Integrantes: Aguerrondo, Carballo, Martin
// Abril 2019 UCU

/*** BeginHeader */
// Definicion de macros
#define MAX_EVENTS 5

// Definicion de estructuras
typedef struct {		// Struct de eventos
	char command;
	char param;
	unsigned long time;
} Event;

// Definicion de variables
Event eventos[MAX_EVENTS];		// Lista de Eventos
/*** EndHeader */




//// Metodos

/*** BeginHeader  posicionLibre */
int posicionLibre();
/*** EndHeader */
int posicionLibre(){  	// Devuelve primer posicion libre del array de eventos
	int i;
	for (i=0;i<MAX_EVENTS;i++){
		if (eventos[i].command == 0xFF){
			return i;
		}
	}
	if (i==MAX_EVENTS-1){	// Indica que el array esta lleno
		return -1;
	}

}

/*** BeginHeader EVENTOS_initEventos*/
void EVENTOS_initEventos();
/*** EndHeader */
void EVENTOS_initEventos(){
	int i;
	for (i=0;i<MAX_EVENTS;i++){
		eventos[i].command = 0xFF;
      eventos[i].param = 0xFF;
	}
	printf("\nEventos iniciados correctamente");
}


/*** BeginHeader EVENTOS_agregarEvento */
void EVENTOS_agregarEvento( Event *p_tempevento);
/*** EndHeader */
void EVENTOS_agregarEvento( Event *p_tempevento)
{
	int posicion;
	//Event evento;
	posicion = posicionLibre() ;
	if (posicion == -1){
		printf("\nERROR: No se puede ingresar evento, calendario lleno.");
	}
	else{
		//evento = eventos[posicion];
		eventos[posicion].command = p_tempevento->command;
		eventos[posicion].param = p_tempevento->param;
		eventos[posicion].time = p_tempevento->time;
		printf("\nEvento AGREGADO correctamente");
	}
}

/*** BeginHeader EVENTOS_eliminarEvento */
void EVENTOS_eliminarEvento( int posicionEvento );
/*** EndHeader */
void EVENTOS_eliminarEvento( int posicionEvento ){
	eventos[posicionEvento].command = 0xFF;
	eventos[posicionEvento].param = 0xFF;
	printf("Evento %d eliminado correctamente.", posicionEvento);
}

/*** BeginHeader EVENTOS_listarEventos */
void EVENTOS_listarEventos();
/*** EndHeader */
void EVENTOS_listarEventos(){
	int i;

	for ( i=0; i<MAX_EVENTS; i++ ){
		printf("\n----------------------------------------:\n" );
		printf("NUMERO DE EVENTO: %d\n", i + 1);
		printEvento( &eventos[i] );
	}
}

/*** BeginHeader EVENTOS_ejecutarEventos */
void EVENTOS_ejecutarEventos();
/*** EndHeader */
void EVENTOS_ejecutarEventos(){
	int i;
	
	for ( i=0; i<MAX_EVENTS; i++ ){
		if (eventos[i].command != 0xFF){
			
			// verifico hora del evento comparando con el timestamp de la hora actual
			if ( eventos[i].time < RTC_leerTimestamp() )  { 
				// verifico si debe encender o apagar el led
				if ( eventos[i].command == '0' ){
					LED_RESET( eventos[i].param );
				}
				else {
					LED_SET( eventos[i].param );
				}
				//EVENTOS_eliminarEvento(i); // Borro el elemento
			}
		}
	}
}