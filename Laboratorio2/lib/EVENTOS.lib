/*** BeginHeader */

// Definicion de macros
#define MAX_EVENTS 5

// Definicion de estructuras
typedef struct {		// Struct de eventos
	char command;
	char param;
	unsigned long time;
} Event;

// Definicion de variables
Event eventos[MAX_EVENTS];		// Lista de Eventos
/*** EndHeader */

//// Metodos
/*** BeginHeader */
void EVENTOS_initEventos();
/*** EndHeader */
void EVENTOS_initEventos(){
	
}


/*** BeginHeader EVENTOS_agregarEvento */
void EVENTOS_agregarEvento();
/*** EndHeader */
void EVENTOS_agregarEvento()
{
	while(1){   // pasar esto a MENU y que llegan solo los datos.
		printf("Opcion 3 - Agregar Evento en Calendario\n");
		printf("Tipo de Evento (1 o 2):\n");
		getswf(evento);
		if (evento < 0 || evento > 1){
			printf("Debe elegir 1 o 2, volver a ingresar\n");
		}else{
			printf("Led a Encender(0-6):\n");
			getswf(led);
			if (led < 0 || led > 6){
					printf("Debe elegir un numero entre  0 y 6");
			}else{
				printf("Ingrese Hora:\n");
				getswf(hora);
				if (hora <0 || hora>23){
					printf("Debe elegir un numero entre  0 y 23");

				}else{		// Configuro el evento con los datos ingresados
					
					eventos[0].command = evento;		// ver el tema de donde ingresar el evento dentro del array
					eventos[0].param = led;
					eventos[0].time = hora
				}
				
			}

		}

	}
}

/*** BeginHeader EVENTOS_eliminarEvento */
void EVENTOS_eliminarEvento();
/*** EndHeader */
void EVENTOS_eliminarEvento(){
	// ver como ubicar el evento
}

/*** BeginHeader EVENTOS_listarEventos */
void EVENTOS_listarEventos();
/*** EndHeader */
void EVENTOS_listarEventos(){
	int j;
	j = 0;
	for (i=0;i<MAX_EVENTS;i++){ // verificar final de datos para no recorrer todo el array
		printf("----------------------------------------:\n", );
		printf("EVENTO %s:\n", j);
		printf("Comando: %s\n", eventos[i].command);
		printf("LED : %s\n", eventos[i].param);
		printf("Hora: %s\n", eventos[i].time);

		j++;
	}
}