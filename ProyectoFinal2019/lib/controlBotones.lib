// Libreria Lectura de Botones //

/* Tiene la tarea de control de botones que verifica constantemente
Si algun boton es presionado.
Si alguno es apretado se ejecutan las acciones dependiendo del boton:
Botones del 0-5 ->son marcas de checkpoint, la persona debe presionar el boton indicado para el checkpoint correspondiente.
Boton 7 -> es un KeepAlive, la persona debe presionarlo cada 10 minutos para indicar que esta bien.
Boton 8 -> es un boton de Ayuda, la persona debe presionarlo si se encuentra en problemas.
*/

/*** BeginHeader */
#define BTN_GET(x)			IO_getInput( (x>3)?PORT_F:PORT_B, (x>3)?x:(x+2) )
#define BTN_IsPRESSED(x)	((BTN_GET(x)==0)?1:0)

#define M_KEEPALIVE 	10		// Son los minutos de keepalive que la persona debe presionar algun bonton.
#define S_KEEPALIVE (M_KEEPALIVE*60)  // Son los segundos de keepalive que la persona debe presionar algun boton.
unsigned long ULTIMO_KEEPALIVE; // Contiene el ultimo timestamp donde se presiono algun boton.
/*** EndHeader */

/*  Tarea que verifica en todo momento si algun boton es presionado.
	Si alguno se presiona se realizan las acciones correspondientes
	al boton seleccionado */
/*** BeginHeader CONTROLBOTONES_tarea_botones */
void CONTROLBOTONES_tarea_botones(void* pdata);
/*** EndHeader */
void CONTROLBOTONES_tarea_botones(void* pdata){

	int i;

	i = 0;
	ULTIMO_KEEPALIVE = RTC_leerTimestamp();

	OSTaskSuspend(OS_PRIO_SELF);			// Se suspende ni bien inicia, ya que para funcionar necesita

	#ifdef DEBUG
		printf("\nTarea 8 Iniciada - Botones");
   	#endif
   											// tener todos los parametros configurados como los checkpoints
	while(1)
	{
		for( i=0; i<8; i++ )
		{
			if( BTN_IsPRESSED(i) )		// Verifica si boton esta presionado
			{
				switch( i ){
					case( 0 ):			// Boton 0	- CHECKPOINT 0
						botonesPosicion(tramaGPS, i);
						break;
					case( 1 ):			// Boton 1	- CHECKPOINT 1
						botonesPosicion(tramaGPS, i);
						break;
					case( 2 ):			// Boton 2  - CHECKPOINT 2
						botonesPosicion(tramaGPS, i);
						break;
					case( 3 ):			// Boton 3  - CHECKPOINT 3
						botonesPosicion(tramaGPS, i);
						break;
					case( 4 ):			// Boton 4  - CHECKPOINT 4
						botonesPosicion(tramaGPS, i);
						break;
					case( 5 ):			// Boton 5  - CHECKPOINT 5
						botonesPosicion(tramaGPS, i);
						break;
					case( 6 ):			// Boton keepalive - avisar que esta vivo
						botonKeepAlive();
						break;
					case( 7 ):			// Boton ayuda - solicitar ayuda
						botonAyuda();
						break;
				}
				OSTimeDlyHMSM(0,0,0,500);
			}
		}
		verificar_keepalive();			// Verificar si no se a presionado ningun boton durante 10 min
	}
}

/* 	Cuando un boton es presionado y la accion es correcta,
	el led correspondiente. */
/*** BeginHeader indicadorLed */
void indicadorLed();
/*** EndHeader */
void indicadorLed(int num_led){
	LED_RESET(num_led);
	LED_SET(num_led);
}

/* Recibe una trama y verifica si la posicion del GPS
   se encuentra dentro del checkpoint configurado
   si lo es enciende un led y envia un mensaje al
   organizador */
/*** BeginHeader botonesPosicion */
void botonesPosicion(char* tramaGPS, int num_checkpoint);
/*** EndHeader */
void botonesPosicion(char* tramaGPS, int num_checkpoint){
	int verificarPos;
	#ifdef BOTONESDEBUG
		printf("\nCheckpoint Presionado %u",num_checkpoint);
	#endif
	// seteo variable keepalive - esta vivo porque presiono un boton
	ULTIMO_KEEPALIVE = RTC_leerTimestamp();

	// Verifico si posicion llego al checkpoint correspondiente
	verificarPos = verificarPosicion(num_checkpoint);
	if(verificarPos == 1){				// posicion correcta
		GPRS_sendsms(CHKPNT);			// envia mensaje
		indicadorLed(num_checkpoint);	// prende led correpondiente
		checkpoints[num_checkpoint].visitado = 1; 		// coloco el checkpoint como visitado
		writeUserBlockArray(0, save_data, save_lens, 6); // guardo datos en memoria flash
		#ifdef BOTONESDEBUG
			printf("\nCheckpoint Verificado %u",num_checkpoint);
		#endif

	}
}

/* Boton KeepAlive la persona debe presionar
   el boton keepalive si no ha presionado ningun otro boton
   durante 10 minutos */
/*** BeginHeader botonKeepAlive */
void botonKeepAlive();
/*** EndHeader */
void botonKeepAlive(){
	// seteo variable keepalive - esta vivo porque presiono un boton
	ULTIMO_KEEPALIVE = RTC_leerTimestamp();
	GPRS_sendsms(KEEPALIVE);
	indicadorLed(6);	// prende led correpondiente
	OSTimeDlySec(1);
	LED_RESET(6);
	OSTimeDlySec(1);
	#ifdef BOTONESDEBUG
		printf("\nKeepAlive Presionado");
	#endif
}
/*** BeginHeader botonAyuda */
void botonAyuda();
/*** EndHeader */
void botonAyuda(){

	// seteo variable keepalive - esta vivo porque presiono un boton
	ULTIMO_KEEPALIVE = RTC_leerTimestamp();
	GPRS_sendsms(HELP);
	indicadorLed(7);	// prende led correpondiente
	#ifdef BOTONESDEBUG
		printf("\nAyuda Presionado");
	#endif
}

/* Compara la fecha actual con la fecha que toco el boton por ultima vez
   Si la diferencia da mayor a 10 minutos (definidos en M_KEEPALIVE )
   Se envia un mensaje a los organizadores con la posicion actual.
   Si no es mayor no se hace nada. */
/*** BeginHeader verificar_keepalive */
void verificar_keepalive();
/*** EndHeader */
void verificar_keepalive(){
	unsigned long ts_hora_actual;
	unsigned long inactividad;

	ts_hora_actual = RTC_leerTimestamp();
	inactividad = ts_hora_actual - ULTIMO_KEEPALIVE;
	if (inactividad > S_KEEPALIVE ){
		GPRS_sendsms(NO_KEEPALIVE);
	}
}