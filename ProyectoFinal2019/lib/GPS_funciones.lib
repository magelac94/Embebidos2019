// Libreria GPS
// Contiene las funciones relacionadas al GPS
// Tambien esta definida la tarea correpondiente a la configuracion del reloj
// que utiliza el GPS para sincronizarse. Y la tarea para acceder a la trama del GPS.

/*** BeginHeader */
#define T_HORA	300 		// Cada 5 minutos chequea la hora en el GPS, si es distinta a la de la placa, la reconfigura

char tramaGPS[GPS_MAX_BUF_SIZE];

/*** EndHeader */

/*La tarea de obtener trama, chequea con el GPS una trama y verifica si es valida.
En ese caso la guarda en una variable global. De otra forma sigue intentando.
La primera vez que consigue una trama valida, habilita a la tarea de configurar
reloj para continuar con el seteo del hora */
/*** BeginHeader GPSFUNCIONES_tarea_obtenertrama */
void GPSFUNCIONES_tarea_obtenertrama( void* pdata );
/*** EndHeader */
void GPSFUNCIONES_tarea_obtenertrama( void* pdata ){

	int status, tareareloj;
	char temp_tramaGPS[GPS_MAX_BUF_SIZE];

	tareareloj = 1;
	#ifdef DEBUG
		printf("\nTarea 5 Iniciada - Obtener TRAMA GPS");
   	#endif
	while (1){
		status = GPS_gets(temp_tramaGPS);		// Obtiene trama del GPS
		if (status == 1){
			strcpy(tramaGPS, temp_tramaGPS);	// Se copia a la variable Global que almacena ultima Trama valida
			if(tareareloj){
				tareareloj = 0;
				OSTaskResume(TAREA_RELOJ);		// Una vez obtenida la primer trama podemos habilitar la tarea de configur reloj
												// ya que sino da error. A este if solo va a ingresar cuando inicia el programa.
			}
		#ifdef GPSDEBUG
			printf("Respuesta del GPS: Trama correcta\n");
			printf("data:\n%s\n", tramaGPS);
		#endif
		}else{
		#ifdef GPSDEBUG
			printf("Respuesta del GPS: ERROR: Trama incompleta\n");
			printf("data:\n%s\n", temp_tramaGPS);
		#endif
		}
	OSTimeDlyHMSM(0,0,1,500);
	}
}

/* La tarea de configuracion reloj, verifica cada 5 minutos la hora
en la placa y la contrasta con la hora real del GPS.
Si es diferente setea la hora en la placa con la nueva hora.
Si es igual no se hace nada */
/*** BeginHeader GPSFUNCIONES_tarea_config_Reloj */
void GPSFUNCIONES_tarea_config_Reloj(void* pdata);
/*** EndHeader */
void GPSFUNCIONES_tarea_config_Reloj(void* pdata){
	struct tm fechaHoraGPS;
	struct tm fechaHoraRTC;
	unsigned long timestampGPS;
	unsigned long timestampRabbit;
	auto INT8U Error;
	int resultado, tareasalud;

	tareasalud = 1;

	OSTaskSuspend(OS_PRIO_SELF);

	#ifdef DEBUG
				printf("\nTarea 6 Iniciada - Configuracion de Reloj");
   	#endif

	while(1){
		#ifdef GPSDEBUG
			printf("TRAMA: %s\n", tramaGPS);
		#endif
		Error = gps_get_utc( &fechaHoraGPS, tramaGPS);

		RTC_leerFechaHora(&fechaHoraRTC);

		#ifdef GPSDEBUG
			printf("\nHoy es: %02d/%02d/%d\n", fechaHoraRTC.tm_mday, fechaHoraRTC.tm_mon, 1900+fechaHoraRTC.tm_year);
   		#endif

		if (Error == 0){
			timestampGPS = mktime( &fechaHoraGPS );
			timestampGPS = (timestampGPS - 108000); // restar al timestamp 3 horas
			timestampRabbit = RTC_leerTimestamp();

			if (timestampGPS != timestampRabbit){

				// Si no es igual la configuro con la fecha del GPS
				RTC_fijarFechaHora(&fechaHoraGPS);
				RTC_leerFechaHora(&fechaHoraRTC);

				#ifdef GPSDEBUG
					printf("\nHoy es: %02d/%02d/%d\n", fechaHoraRTC.tm_mday, fechaHoraRTC.tm_mon, 1900+fechaHoraRTC.tm_year);
   				#endif
				if(tareasalud){
					tareasalud = 0;
					OSTaskResume(TAREA_SALUD);
					OSTaskResume(TAREA_BOTONES);
				}
			}
		}
		OSTimeDlySec(T_HORA);

	}
}



/* Dada una Trama GPS, se obtiene la posicion de dicha trama
Devuelve la posicion en el puntero pasado por parametros */
/*** BeginHeader obtenerPosicion */
int obtenerPosicion(GPSPosition unaPos);
/*** EndHeader */
int obtenerPosicion(GPSPosition unaPos){
	int latgrados,longrados;
	auto INT8U Error;

	Error = gps_get_position(&unaPos,tramaGPS);
	if (Error == 0){	// Resultado correcto
		printf("-");
	}else{	// Trama o resultado incorrecto
		OSTimeDlyHMSM(0,0,1,0);
		return Error;
	}
}

/* Dada una posicion actual (obtenida del GPS),
se verifica si esa posicion esta en el radio acordado del checkpoint correspondiente
pasado por parametro.
La funcion devuelve 1 si la posicion esta dentro del rango del checkpoint
y 0 si no. */
/*** BeginHeader verificarPosicion */
int verificarPosicion(int numCheckpoint);
/*** EndHeader */
int verificarPosicion(int numCheckpoint ){
	float distancia;
   	GPSPosition posicion;

   	// Verificar posicion actual
   	obtenerPosicion(posicion);

   	// calcula la distancia entre ambos puntos en KM.
   	distancia = gps_ground_distance( &posicion, &checkpoints[numCheckpoint].gpsPosition );

   	// Verifico si la distancia calculada es mayor al radio establecido como parametro
   	if (distancia <= CHKP_RADIO){
		return 1;
	}else{
		return 0;
	}
}


/* Dada una posicion la imprime por consola */
/*** BeginHeader imprimirPosicion */
void imprimirPosicion(GPSPosition unaPos);
/*** EndHeader */
void imprimirPosicion(GPSPosition unaPos){

	printf( "\n--------------------------------------\n\
			Coordenadas:\n\
			Latitud: %u%.4f\n\
			Longitud: %u%.4f\n\
			", unaPos.lat_degrees, unaPos.lat_minutes,unaPos.lon_degrees, unaPos.lon_minutes);

}

/* Data una posicion, devuelve una cadena con la longitud y la latitud */
/*** BeginHeader stringPosicion */
void stringPosicion(GPSPosition pos, char* stringpos);
/*** EndHeader */
void stringPosicion(GPSPosition pos, char* stringpos){

	int latgrados,longrados;
	float minlat, minlon;
  	char latgradoss[2], longradoss[2], minlats[6],minlons[6];

	latgrados = pos.lat_degrees;
	longrados = pos.lon_degrees;
	minlat = pos.lat_minutes;
	minlon = pos.lon_minutes;

   itoa(latgrados, latgradoss);
   itoa(longrados, longradoss);
//   itoa(minlat, minlats);
//   itoa(minlon, minlons);
	memset(stringpos, 0, sizeof(stringpos));
	sprintf(stringpos, "%s-%s",latgradoss,longradoss);


	//stringpos = latgradoss + "-" + longradoss ;

	#ifdef GPSDEBUG
			printf("\n String Posicion: %s\n", stringpos);
	#endif
}