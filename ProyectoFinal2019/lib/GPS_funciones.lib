// Libreria GPS
#define T_HORA	300	

/* La tarea de configuracion reloj, verifica cada 5 minutos la hora 
en la placa y la contrasta con la hora real del GPS.
Si es diferente setea la hora en la placa con la nueva hora.
Si es igual no se hace nada */
/*** BeginHeader tarea_config_Reloj */
void tarea_config_Reloj(void* pdata);
/*** EndHeader */
void tarea_config_Reloj(void* pdata){
	struct tm* fechaHoraGPS;
	struct tm* fechaHoraRTC;
	unsigned long timestampGPS;
	unsigned long timestampRabbit;
	auto INT8U Error;

	char* p_str;
	char* tramaGPS;
	int resultado;

	while(1){
		printf("TRAMA: %s\n", pdata);
		Error = gps_get_utc( fechaHoraGPS, pdata);

		RTC_leerFechaHora(fechaHoraRTC);
		printf("\nHoy es: %02d/%02d/%d\n", fechaHoraRTC->tm_mday, fechaHoraRTC->tm_mon, 1900+fechaHoraRTC->tm_year);


		if (Error == 0){
			timestampGPS = mktime( fechaHoraGPS );

			timestampRabbit = RTC_leerTimestamp();

			if (timestampGPS != timestampRabbit){

				// Si no es igual la configuro con la fecha del GPS
				RTC_fijarFechaHora(fechaHoraGPS );
			}
		}
		OSTimeDlySec(T_HORA);

	}
}




/*	while(1){  // Configurar reloj cada 1 minuto o mas0

		//memset(tramaGPS, 0, sizeof(p_str)); // limpio valones en memoria
	//	memset(tramaGPS, 0, sizeof(tramaGPS)); // limpio valones en memoria

		//resultado = GPS_gets(tramaGPS);
		printf("resultado gets gps trama: %s\n", resultado );

		//Imprimo Trama Completa
		printf("\n TRAMA1: %s ", tramaGPS);


		// Obtengo Fecha del GPS
		Error = gps_get_utc( fechaHoraGPS, tramaGPS);		// ver si esta hora es de donde estoy ubicado

		if (Error = 0){	// Si el resultado es correcto  sigo
			// Convierto la fecha en timestamp
			timestampGPS = mktime( fechaHoraGPS );

			// Obtengo Fecha Placa
			timestampRabbit = RTC_leerTimestamp();
			RTC_leerFechaHora(fechaHoraRTC);

			// Imprimir Fecha Placa
			printf("\nHoy es: %02d/%02d/%d\n", fechaHoraRTC->tm_mday, fechaHoraRTC->tm_mon, 1900+fechaHoraRTC->tm_year);

			// Evaluo si la fecha obtenida es igual a la que ya esta configurada
			if (timestampGPS != timestampRabbit){

				// Si no es igual la configuro con la fecha del GPS
				RTC_fijarFechaHora(fechaHoraGPS );
			}
		}else{
			printf("ERROR al leer get utc\n");
			OSTimeDlyHMSM(0,0,1,100);
		}
	}*/

/* Dada una Trama GPS, se obtiene la posicion de dicha trama
Devuelve la posicion en el puntero pasado por parametros */
/*** BeginHeader obtenerPosicion */
void obtenerPosicion(char* tramaGPS, GPSPosition *posicion);
/*** EndHeader */
void obtenerPosicion(char* tramaGPS, GPSPosition *posicion){
  //	GPSPosition *posicion;
	int latgrados,longrados;
	auto INT8U Error;

	Error = gps_get_position(posicion,tramaGPS);
	if (Error == 0){	// Resultado correcto
		imprimirPoscion(posicion);
	}else{	// Trama o resultado incorrecto
		OSTimeDlyHMSM(0,0,1,0);
	}

}

/* Dada una posicion actual (obtenida del GPS),
se verifica si esa posicion esta en el radio acordado del checkpoint correspondiente
pasado por parametro.
La funcion devuelve 1 si la posicion esta dentro del rango del checkpoint 
y 0 si no. */
/*** BeginHeader verificarPosicion */
int verificarPosicion(char* tramaGPS, int numCheckpoint);
/*** EndHeader */
int verificarPosicion(char* tramaGPS, int numCheckpoint ){
	GPSPosition* posicion;
	CHECKPOINT * chp;
	chp = CHECKPOINT[numCheckpoint]
	float distancia;
	distancia = gps_ground_distance( posicion, chp ); // calcula la distancia entre ambos puntos en KM.
	if (distancia <= RADIO){
		return 1
	}else{
		return 0;
	}
}


/* Dada una posicion la imprime por consola */
/*** BeginHeader imprimirPoscion */
void imprimirPoscion(GPSPosition *pos);
/*** EndHeader */
void imprimirPoscion(GPSPosition *pos){

	int latgrados,longrados;

	latgrados = pos->lat_degrees;
	longrados = pos->lon_degrees;

	printf("%d\n", latgrados );
	printf("%d\n", longrados );
}

/* Data una posicion, devuelve una cadena con la longitud y la latitud */
/*** BeginHeader stringPosicion */
void stringPosicion(GPSPosition *pos, char* stringpos);
/*** EndHeader */
void stringPosicion(GPSPosition *pos, char* stringpos){

	int latgrados,longrados;

	latgrados = pos->lat_degrees;
	longrados = pos->lon_degrees;

	stringpos = latgrados + "-" + longrados
}