
/*** BeginHeader */
#define STDIO_ENABLE_LONG_STRINGS

// Definicion de estructuras y enums

enum opcionMenu {
	OPCION_0 = 0,
	OPCION_1,
	OPCION_2,
	OPCION_3,
	OPCION_4,
	OPCION_5,
	OPCION_6,
	OPCION_7,
	OPCION_8
};

enum tipoUI {
	CONSOLA = 0,
	TCP
};
/*** EndHeader */



/*** BeginHeader enviar_a_ui */
void enviar_a_ui(enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket );
/*** EndHeader */
void enviar_a_ui(enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket ){

   auto int bytes_enviados, i;

	switch(interfazAUsar){
		case( CONSOLA ):
			printf( "%s", pbuffer );
			for ( i = 0; i < TAMANIO_BUFFER_LE; i++ ){		// Limpieza de nuestro buffer
				pbuffer[i] = ' ';
			}
			break;

		case ( TCP ):
			// Control antes de usar funciones bloqueantes. Si no esta el buffer con espacio, espero.
			while( sock_tbleft(pun_tcp_socket) < TAMANIO_BUFFER_LE ){
				OSTimeDlyHMSM(0, 0, 0, 100);
			}
			bytes_enviados=sock_puts( pun_tcp_socket, pbuffer);
			if(bytes_enviados>0) {
				for ( i = 0; i < bytes_enviados; i++ ){		// Limpieza de nuestro buffer
					pbuffer[i] = ' ';
				}
			}
			break;

		default:
#ifdef DEBUG
			printf( "\nDEBUG: MENU: ENVIAR_A_UI: ERROR DE SISTEMA: No existe la interfazAUsar elegida. Vea funcion enviar_a_ui" ); //EL ERROR SOLO SALE EN LA CONSOLA
#endif
			break;
	}
}



/*** BeginHeader obtener_de_ui */
void obtener_de_ui( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket );
/*** EndHeader */
void obtener_de_ui( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket ){

	switch( interfazAUsar ){
		case( CONSOLA ):
			gets(pbuffer);
#ifdef DEBUG
			printf("\nDEBUG: CONSOLA: NUMERO INGRESADO   .....>  %s\n", pbuffer );
#endif
			break;

		case ( TCP ):
			// Si sigue vivo el socket, intentamos leer
			if ( tcp_tick(pun_tcp_socket) != 0 ){
				// Control antes de usar funciones bloqueantes. Si no esta el string completo, espero.
				while( tcp_tick(pun_tcp_socket) != 0 && sock_bytesready(pun_tcp_socket) == -1 ){
            	OSTimeDlyHMSM(0,0,0,100);
				}
				sock_gets(pun_tcp_socket, pbuffer, TAMANIO_BUFFER_LE);
			}
			break;

		default:
#ifdef DEBUG
			printf( "\nERROR DE SISTEMA: No existe la interfazAUsar elegida. Vea funcion obtener_de_ui" ); //aca hay que manejar bien lo que pasa al fallar
#endif
			break;
	}
}



/*** BeginHeader MENU_mostrarMenuPrincipal */
void MENU_mostrarMenuPrincipal( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket );
/*** EndHeader */
void MENU_mostrarMenuPrincipal( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket ){

	ClearScreen( interfazAUsar );

	// Metemos en el buffer el texto formateado
	sprintf( pbuffer,\
"\n   Bienvenido al sistema de monitoreo y alertas\n\
----------------------------------------\n\
1 - Consultar fecha y hora\n\
2 - Registrar/Eliminar checkpoints\n\
3 - Configurar distancia requerida al checkpoint\n\
4 - Listar checkpoints configurados\n\
5 - Configurar ID de participante\n\
6 - Configurar rango de ritmo cardiaco normal\n\
7 - Configurar tiempo de inactividad\n \
>>" );
	// Mandamos el buffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket);
}



/*** BeginHeader MENU_obtenerOpcion */
void MENU_obtenerOpcion( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket *pun_tcp_socket );
/*** EndHeader */
void MENU_obtenerOpcion( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket *pun_tcp_socket ){
	// Obtenemos la opcion del menu principal desde la UI deseada
	obtener_de_ui( interfazAUsar, pbuffer, pun_tcp_socket );
}



/*** BeginHeader MENU_consultarHora */
void MENU_consultarHora( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket);
/*** EndHeader */
void MENU_consultarHora( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket ){

	ClearScreen( interfazAUsar );

	// Metemos en el buffer el texto formateado
	sprintf(pbuffer, "\n\n-------- FECHA Y HORA ACTUAL -------\n");
	// Mandamos el buffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket);
}



/*** BeginHeader MENU_printFechaHora */
void MENU_printFechaHora ( enum tipoUI interfazAUsar, struct tm* pFechaHora, char* pbuffer, tcp_Socket* pun_tcp_socket );
/*** EndHeader */
// Imprime la fecha y la hora de una estructura tm
void MENU_printFechaHora ( enum tipoUI interfazAUsar, struct tm* pFechaHora, char* pbuffer, tcp_Socket* pun_tcp_socket ){

	char stop[2];

	printFechaHora( interfazAUsar, pFechaHora, pbuffer, pun_tcp_socket );

	if (interfazAUsar == CONSOLA){
		gets(stop);
	}
}



/*** BeginHeader printFechaHora */
void printFechaHora ( enum tipoUI interfazAUsar, struct tm* pFechaHora, char* pbuffer, tcp_Socket* pun_tcp_socket );
/*** EndHeader */
// Imprime la fecha y la hora de una estructura tm
void printFechaHora ( enum tipoUI interfazAUsar, struct tm* pFechaHora, char* pbuffer, tcp_Socket* pun_tcp_socket ){

	int dia, mes, anio, hora, minuto;

	anio = (int)pFechaHora->tm_year;
	anio = anio + 1900;
	mes = (int)pFechaHora->tm_mon;
	dia = (int)pFechaHora->tm_mday;
	hora = (int)pFechaHora->tm_hour;
	minuto = (int)pFechaHora->tm_min;

	if ( mes < 10 ){
		if ( dia < 10){
			if ( hora < 10 ){
				if ( minuto < 10 ){
					sprintf( pbuffer,"\nFecha: 0%u/0%u/%u\nHora: 0%u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( pbuffer,"\nFecha: 0%u/0%u/%u\nHora: 0%u:%u", dia, mes, anio, hora, minuto);
				}
			} else {
				if ( minuto < 10 ){
					sprintf( pbuffer,"\nFecha: 0%u/0%u/%u\nHora: %u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( pbuffer,"\nFecha: 0%u/0%u/%u\nHora: %u:%u", dia, mes, anio, hora, minuto);
				}
			}
		} else {
			if ( hora < 10 ){
				if ( minuto < 10 ){
					sprintf( pbuffer,"\nFecha: %u/0%u/%u\nHora: 0%u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( pbuffer,"\nFecha: %u/0%u/%u\nHora: 0%u:%u", dia, mes, anio, hora, minuto);
				}
			} else {
				if ( minuto < 10 ){
					sprintf( pbuffer,"\nFecha: %u/0%u/%u\nHora: %u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( pbuffer,"\nFecha: %u/0%u/%u\nHora: %u:%u", dia, mes, anio, hora, minuto);
				}
			}
		}
	} else {
		if ( dia < 10){
			if ( hora < 10 ){
				if ( minuto < 10 ){
					sprintf( pbuffer,"\nFecha: 0%u/%u/%u\nHora: 0%u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( pbuffer,"\nFecha: 0%u/%u/%u\nHora: 0%u:%u", dia, mes, anio, hora, minuto);
				}
			} else {
				if ( minuto < 10 ){
					sprintf( pbuffer,"\nFecha: 0%u/%u/%u\nHora: %u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( pbuffer,"\nFecha: 0%u/%u/%u\nHora: %u:%u", dia, mes, anio, hora, minuto);
				}
			}
		} else {
			if ( hora < 10 ){
				if ( minuto < 10 ){
					sprintf( pbuffer,"\nFecha: %u/%u/%u\nHora: 0%u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( pbuffer,"\nFecha: %u/%u/%u\nHora: 0%u:%u", dia, mes, anio, hora, minuto);
				}
			} else {
				if ( minuto < 10 ){
					sprintf( pbuffer,"\nFecha: %u/%u/%u\nHora: %u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( pbuffer,"\nFecha: %u/%u/%u\nHora: %u:%u", dia, mes, anio, hora, minuto);
				}
			}
		}
	}
	// Mandamos el buffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
}



/*** BeginHeader MENU_pedirDatosCheckpoint */
void MENU_pedirDatosCheckpoint( enum tipoUI interfazAUsar, CHECKPOINT *p_Checkpoint, char* pbuffer, tcp_Socket* pun_tcp_socket );
/*** EndHeader */
void MENU_pedirDatosCheckpoint( enum tipoUI interfazAUsar, CHECKPOINT *p_Checkpoint, char* pbuffer, tcp_Socket* pun_tcp_socket ){
	
	int int_opcion;
	
	ClearScreen( interfazAUsar );
	
	// Metemos en el pbuffer el texto formateado
	sprintf( pbuffer, "\n\n-------- AGREGAR CHECKPOINT --------------" );
	// Mandamos el pbuffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
	
	// Metemos en el pbuffer el texto formateado
	sprintf( pbuffer, "\nID Checkpoint (1-9): ");
	// Mandamos el pbuffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
	// Obtenemos la opcion de la UI deseada
	obtener_de_ui( interfazAUsar, pbuffer, pun_tcp_socket);
	
	// Convertimos a int
	int_opcion = atoi( pbuffer );
	// Validacion de id de checkpoint
	if ( int_opcion < 1 || int_opcion > 9 ){
		// MENSAJE DE ERROR
		// Metemos en el pbuffer el texto formateado
		sprintf( pbuffer, "\nERROR: Debe elegir valor entre 1 y 9. Volver a ingresar\n" );
		// Mandamos el pbuffer a la interfaz a usar
		enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket  );
	}
	else{
		// Fijo el tipo de evento
		p_Checkpoint->id = pbuffer[0];
		
		// PIDO EL PROXIMO DATO. LAT
		// Metemos en el pbuffer el texto formateado
		sprintf( pbuffer, "\nIngrese LATITUD(-90,+90): ");
		// Mandamos el pbuffer a la interfaz a usar
		enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
		// Obtenemos la opcion de la UI deseada
		obtener_de_ui( interfazAUsar, pbuffer, pun_tcp_socket);

		// Convertimos a int
		int_opcion = atoi( pbuffer );
		// Validacion de LATITUD
		if ( int_opcion < (-90) || int_opcion > 90){
			// Metemos en el pbuffer el texto formateado
			sprintf( pbuffer,"\nERROR: Debe elegir un numero entre -90 y +90. Volver a ingresar\n");
			// Mandamos el pbuffer a la interfaz a usar
			enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
		}
		else{
			// Fijo LATITUD
			p_Checkpoint->lat = pbuffer[0];
			
			// PIDO EL SIGUIENTE DATO. LONGITUD
			// Metemos en el pbuffer el texto formateado
			sprintf( pbuffer, "\nIngrese LONGITUD(-180,+180): ");
			// Mandamos el pbuffer a la interfaz a usar
			enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
			// Obtenemos la opcion de la UI deseada
			obtener_de_ui( interfazAUsar, pbuffer, pun_tcp_socket);

			// Convertimos a int
			int_opcion = atoi( pbuffer );
			// Validacion de LONGITUD
			if ( int_opcion < (-180) || int_opcion > 180){
				// Metemos en el pbuffer el texto formateado
				sprintf( pbuffer,"\nERROR: Debe elegir un numero entre -180 y +180. Volver a ingresar\n");
				// Mandamos el pbuffer a la interfaz a usar
				enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
			}
			else{
				// Fijo LONGITUD
				p_Checkpoint->lon = pbuffer[0];
				
				// PIDO EL SIGUIENTE DATO. ALTURA
				// Metemos en el pbuffer el texto formateado
				sprintf( pbuffer, "\nIngrese ALTURA(-180,+1800): ");
				// Mandamos el pbuffer a la interfaz a usar
				enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
				// Obtenemos la opcion de la UI deseada
				obtener_de_ui( interfazAUsar, pbuffer, pun_tcp_socket);
	
				// Convertimos a int
				int_opcion = atoi( pbuffer );
				// Validacion de ALTURA
				if ( int_opcion < (-180) || int_opcion > 1800){
					// Metemos en el pbuffer el texto formateado
					sprintf( pbuffer,"\nERROR: Debe elegir un numero entre -180 y +1800. Volver a ingresar\n");
					// Mandamos el pbuffer a la interfaz a usar
					enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
				}
				else{
					// Fijo ALTURA
					p_Checkpoint->alt = pbuffer[0];
					return;
				}
			}
		}
	}
}



/*** BeginHeader MENU_eliminarCheckpoint */
int MENU_eliminarCheckpoint( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket );
/*** EndHeader */
int MENU_eliminarCheckpoint( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket ){

	int int_numCheckpoint;

	ClearScreen( interfazAUsar );

	while(1){
		// Metemos en el pbuffer el texto formateado
		sprintf( pbuffer,"\n\n-------- ELIMINAR CHECKPOINT -------\n\nPara eliminar ingrese numero de checkpoint (0 para listar los checkpoints): \n");
		// Mandamos el pbuffer a la interfaz a usar
		enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket);
		// Obtenemos la opcion de la UI deseada
		obtener_de_ui( interfazAUsar, pbuffer, pun_tcp_socket );

		// Convertimos a int
		int_numCheckpoint = atoi( pbuffer );
		if ( int_numCheckpoint == OPCION_0 ){
			MENU_printCheckpoints( interfazAUsar, pbuffer, pun_tcp_socket);
		}
		else{
			if ( int_numCheckpoint > 0 && int_numCheckpoint <= MAX_CHECKPOINTS ){ // Si es un id correcto, lo devilvemos
				int_numCheckpoint = int_numCheckpoint - 1;
#ifdef DEBUG
			printf( "\nDEBUG: MENU_eliminarEvento int a devolver: %d", int_numCheckpoint );
#endif
				return int_numCheckpoint;
			}
			else{
				// Metemos en el pbuffer el texto formateado
				sprintf( pbuffer,"\nNumero de Checkpoint incorrecto");
				// Mandamos el pbuffer a la interfaz a usar
				enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket);
				OSTimeDlyHMSM( 0, 0, 3, 0 );
			}
		}
	}
}




































/*** BeginHeader MENU_pedirDatosEvento */
void MENU_pedirDatosEvento( enum tipoUI interfazAUsar, Event *p_Evento, struct tm *pFechaHora, char* pbuffer, tcp_Socket* pun_tcp_socket );
/*** EndHeader */
void MENU_pedirDatosEvento( enum tipoUI interfazAUsar, Event *p_Evento, struct tm *pFechaHora, char* pbuffer, tcp_Socket* pun_tcp_socket ){

	int int_opcion;
	unsigned long timestamp;
	char stop[2];

	ClearScreen( interfazAUsar );

	// Metemos en el pbuffer el texto formateado
	sprintf( pbuffer, "\n\n-------- AGREGAR EVENTO --------------" );
	// Mandamos el pbuffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );

	while(1){
		// Metemos en el pbuffer el texto formateado
		sprintf( pbuffer, "\nTipo de Evento (1-Encender o 2-Apagar): ");
		// Mandamos el pbuffer a la interfaz a usar
		enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
		// Obtenemos la opcion de la UI deseada
		obtener_de_ui( interfazAUsar, pbuffer, pun_tcp_socket);

		// Convertimos a int
		int_opcion = atoi( pbuffer );
		// Validacion de tipo evento
		if ( int_opcion < 1 || int_opcion > 2 ){
			// MENSAJE DE ERROR
			// Metemos en el pbuffer el texto formateado
			sprintf( pbuffer, "\nERROR: Debe elegir 1 o 2. Volver a ingresar\n" );
			// Mandamos el pbuffer a la interfaz a usar
			enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket  );
		}
		else{
			// Fijo el tipo de evento
			p_Evento->command = pbuffer[0];

			// PIDO EL PROXIMO DATO. NRO DE LED
			// Metemos en el pbuffer el texto formateado
			sprintf( pbuffer, "\nLed a Encender(0-7): ");
			// Mandamos el pbuffer a la interfaz a usar
			enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
			// Obtenemos la opcion de la UI deseada
			obtener_de_ui( interfazAUsar, pbuffer, pun_tcp_socket);

			// Convertimos a int
			int_opcion = atoi( pbuffer );
			// Validacion de nro de led
			if ( int_opcion < 0 || int_opcion > 7){
				// Metemos en el pbuffer el texto formateado
				sprintf( pbuffer,"\nERROR: Debe elegir un numero entre 0 y 7. Volver a ingresar\n");
				// Mandamos el pbuffer a la interfaz a usar
				enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
			}
			else{
				// Fijo el nro de led
				p_Evento->param = pbuffer[0];

				// PIDO EL SIGUIENTE DATO. FECHA Y HORA
				MENU_pedirFechaHora( interfazAUsar, pFechaHora, pbuffer, pun_tcp_socket );
				printFechaHora( interfazAUsar, pFechaHora, pbuffer, pun_tcp_socket );
				timestamp = mktime( pFechaHora );
				p_Evento->time = timestamp;
				if (interfazAUsar == CONSOLA){
					gets(stop);
				}
				return;
			}
		}
	}
}



/*** BeginHeader MENU_consultarEventos */
void MENU_consultarEventos( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket );
/*** EndHeader */
void MENU_consultarEventos( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket ){

	ClearScreen( interfazAUsar );

	// Metemos en el pbuffer el texto formateado
	sprintf( pbuffer, "\n\n-------- LISTAR EVENTOS -------" );
	// Mandamos el pbuffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
}



/*** BeginHeader MENU_printEventos */
void MENU_printEventos ( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket );
/*** EndHeader */
void MENU_printEventos ( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket ){

	struct tm FechaHora;
	auto int i;
	auto INT8U Error;
	char stop[2];

	// Nos aseguramos que tenemos el recurso para nosotros
	OSSemPend(pSemaforoEventos, 0, &Error);
		for ( i=0; i<MAX_EVENTS; i++ ){
			if ( eventos[i].command != 0xFF ){
				sprintf( pbuffer, "\n------------------------------\nNum Evento: %u \nCommand: %c\nParam: %c\nTime: ", i+1, eventos[i].command, eventos[i].param)   ;
				enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
				mktm( &FechaHora, eventos[i].time );
				printFechaHora( interfazAUsar, &FechaHora, pbuffer, pun_tcp_socket );
			}
		}
	// Devolvemos el recurso
	OSSemPost(pSemaforoEventos);
	if (interfazAUsar == CONSOLA){
		gets(stop);
	}
}



/*** BeginHeader MENU_eliminarEvento */
int MENU_eliminarEvento( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket );
/*** EndHeader */
int MENU_eliminarEvento( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket* pun_tcp_socket ){

	int int_numEvento;

	ClearScreen( interfazAUsar );

	while(1){
		// Metemos en el pbuffer el texto formateado
		sprintf( pbuffer,"\n\n-------- ELIMINAR EVENTO -------\n\nPara eliminar ingrese numero de evento (0 para listar los eventos): \n");
		// Mandamos el pbuffer a la interfaz a usar
		enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket);
		// Obtenemos la opcion de la UI deseada
		obtener_de_ui( interfazAUsar, pbuffer, pun_tcp_socket );

		// Convertimos a int
		int_numEvento = atoi( pbuffer );
		if ( int_numEvento == OPCION_0 ){
			MENU_printEventos( interfazAUsar, pbuffer, pun_tcp_socket);
		}
		else{
			if ( int_numEvento > 0 && int_numEvento <= MAX_EVENTS ){ // Si es un id correcto, lo devilvemos
				int_numEvento = int_numEvento - 1;
#ifdef DEBUG
			printf( "\nDEBUG: MENU_eliminarEvento int a devolver: %d", int_numEvento );
#endif
				return int_numEvento;
			}
			else{
				// Metemos en el pbuffer el texto formateado
				sprintf( pbuffer,"\nNumero de Evento Incorrecto");
				// Mandamos el pbuffer a la interfaz a usar
				enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket);
				OSTimeDlyHMSM( 0, 0, 3, 0 );
			}
		}
	}
}



/*** BeginHeader MENU_pedirEntradaAnalogica */
void MENU_pedirEntradaAnalogica( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket *pun_tcp_socket );
/*** EndHeader */
void MENU_pedirEntradaAnalogica( enum tipoUI interfazAUsar, char* pbuffer, tcp_Socket *pun_tcp_socket ){

	char stop[2];

	ClearScreen( interfazAUsar );

	while(1){
		// Metemos en el pbuffer el texto formateado
		sprintf( pbuffer,"\n\n-------- Entrada Analogica -------\n\n\nIngrese entrada analogica (0 o 1): \n");
		// Mandamos el pbuffer a la interfaz a usar
		enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket);
		// Obtenemos la opcion de la UI deseada
		obtener_de_ui(interfazAUsar, pbuffer, pun_tcp_socket );
		if ( *pbuffer == '0' || *pbuffer == '1' ){
			return;
		}
		sprintf( pbuffer,"\n\n-- Valor incorrecto, ingrese nuevamente --\n\n");
		enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket );
	}
	if (interfazAUsar == CONSOLA){
		gets(stop);
	}
}



/*** BeginHeader MENU_mostrarEntradaAnalogica */
void MENU_mostrarEntradaAnalogica( enum tipoUI interfazAUsar, int *pint_Analog_Value, char* pbuffer, tcp_Socket *pun_tcp_socket );
/*** EndHeader */
void MENU_mostrarEntradaAnalogica( enum tipoUI interfazAUsar, int *pint_Analog_Value, char* pbuffer, tcp_Socket *pun_tcp_socket ){

	char stop[2];

	//ClearScreen( interfazAUsar );

	// Metemos en el buffer el texto formateado
	sprintf( pbuffer,"\n\nEl valor de la entrada analogica es: %u\n", *pint_Analog_Value);
	// Mandamos el buffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, pbuffer, pun_tcp_socket);
	if (interfazAUsar == CONSOLA){
		gets(stop);
	}
}