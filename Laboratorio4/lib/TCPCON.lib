/*** BeginHeader */
#define TCPCONFIG 0
#define USE_ETHERNET		1
#define MY_IP_ADDRESS "10.10.0.10"
#define MY_NETMASK "255.255.255.0"
#define PORT 7
#define MY_GATEWAY "10.10.0.1"

#use dcrtcp.lib

/*
3.2 Allocating TCP and UDP Sockets
In all versions of Dynamic C, TCP and UDP socket structures must be allocated in static data storage. This
is simply accomplished by declaring a static variable of type tcp_Socket or udp_Socket:
static tcp_Socket my_sock;
*/
/*static tcp_Socket mi_socket_tcp;
int status;
char buffer[2048];*/

	static tcp_Socket mi_socket_tcp;
	int status;
	static char buffer[2048];
/*** EndHeader */


/*** BeginHeader  TCPCON_conexion */
void TCPCON_conexion();
/*** EndHeader */
void TCPCON_conexion(){
/*static tcp_Socket mi_socket_tcp;
	int status;
	static char buffer[2048];*/

	while(1) {

		// Si se cerro la conexion, vuelve a abrir el socket y espera
		tcp_listen( &mi_socket_tcp, PORT,0,0,NULL,0);
		printf("\nINFO: Esperando conexion...\n");
		// Queda esperando pero cede el procesador luego de cada chequeo
		while(!sock_established(&mi_socket_tcp) && sock_bytesready(&mi_socket_tcp)==-1){
			tcp_tick(NULL);
			OSTimeDlyHMSM(0,0,1,0);  // del ejemplo del dynamic
		}
		printf("\nINFO: Conexion establecida...\n");

		// Mientras esta la conexion establecida, cede el CPU
	/*	while(tcp_tick( &mi_socket_tcp )){
			OSTimeDlyHMSM(0,0,0,100);  // del ejemplo del dynamic

		}*/
		printf("\nINFO: Connection closed...\n");

		/*
		sock_err::
		switch(status)
		{
			case 1: // foreign host closed
				printf("User closed session\n");
				break;
			case -1: // time-out
				printf("Connection timed out\n");
				break;
		}
		*/
	}
}


void TCPCON_obtener(){

			sock_wait_input(&mi_socket_tcp,0,NULL,&status);
			if(sock_gets(&mi_socket_tcp,buffer,2048))
			{
				sock_puts(&mi_socket_tcp,buffer);
			}

			sock_err:
         	switch(status){
            	case 1: // foreign host closed
						printf("User closed session\n");
						break;
					case -1: // time-out
						printf("Connection timed out\n");
						break;
            }

}

