 /*** BeginHeader */
#define TCPCONFIG 0
#define USE_ETHERNET		1
#define MY_IP_ADDRESS "10.10.0.10"
#define MY_NETMASK "255.255.255.0"
#define PORT 7
#define MY_GATEWAY "10.10.0.1"

#use dcrtcp.lib

/*** EndHeader */

 /*** BeginHeader TareaTCP */
void TareaTCP(void *pdata);
/*** EndHeader */
void TareaTCP(void *pdata){
	static char buffer[1024];
	static tcp_Socket echo_socket;
	auto int length;
	auto int interfazAUsar;
	char opcion_menu[5], aux[5];
	auto int int_opcion_menu, int_id_evento, int_Analog_Value;
	Event unEvento;
	struct tm FechaHora;

   interfazAUsar = 1;

	while(1) {
		tcp_listen(&echo_socket,7,0,0,NULL,0);

		while(!sock_established(&echo_socket) && sock_bytesready(&echo_socket)==-1) {
			tcp_tick(NULL);
			OSTimeDlyHMSM(0,0,1,0);
		}

		while(tcp_tick(&echo_socket)) {
	    	// Muestra Menu y pide una opcion
			MENU_mostrarMenuPrincipal( interfazAUsar, &echo_socket, buffer );
			MENU_obtenerOpcion( interfazAUsar, opcion_menu, &echo_socket, buffer );
			int_opcion_menu = atoi( opcion_menu );

			// Evaluacion de la Opcion
			switch( int_opcion_menu ){
				case( OPCION_1 ):
					// CONFIGURAR FECHA HORA
					MENU_pedirFechaHora( &FechaHora, interfazAUsar, &echo_socket, buffer );
					RTC_fijarFechaHora( &FechaHora );
					//MENU_printFechaHora( &FechaHora, interfazAUsar );		// Imprimo la Fecha y hora modificadoS

					break;

				case( OPCION_2 ):
					// CONSULTAR FECHA HORA ACTUAL
					MENU_consultarHora( interfazAUsar, &echo_socket );
					RTC_leerFechaHora( &FechaHora );	// Leo el RTC
					MENU_printFechaHora( &FechaHora, interfazAUsar ); // Imprimo la Fecha y hora
					break;

				case( OPCION_3 ):
					// AGREGAR EVENTO
					MENU_pedirDatosEvento( &unEvento, &FechaHora, interfazAUsar, &echo_socket, buffer);
				//	EVENTOS_agregarEvento( &eventos, &unEvento ); // ver el tema del array de eventos, lo agregue en el mail lo saque del Eventos para poder manejar diferentes array , 1 por instancia, a no ser que sea todo el emis
					break;
				case ( OPCION_4 ):
					// ELIMINAR EVENTO SEGUN EL NUMERO DE EVENTO (ES DE 1 EN adelante segun posicion en el array))
					int_id_evento = MENU_eliminarEvento( interfazAUsar, &echo_socket, buffer );
					printf("%d\n", int_id_evento);
				//	EVENTOS_eliminarEvento( int_id_evento );  // revisar despues de agregarEvento
					break;
				case( OPCION_5 ):
					// CONSULTAR EVENTO
					MENU_consultarEventos( interfazAUsar, &echo_socket );
					EVENTOS_listarEventos();
					break;

				case( OPCION_6 ):
					// CONSULTA ANALOGICA
					MENU_pedirEntradaAnalogica( interfazAUsar, aux, &echo_socket, buffer );
					int_opcion_menu = atoi(aux);
					int_Analog_Value = IO_getAnalogInput( int_opcion_menu ); //el valor que toma por parametro es un unsigned char
					MENU_mostrarEntradaAnalogica( interfazAUsar, &int_Analog_Value, &echo_socket );
					break;
				case( OPCION_7 ):
					// SALIR
					printf("Salir");
					break;


				default:
					// OPCION INCORRECTA
					printf("\nOpcion DEFAULT: %d \n", int_opcion_menu);
					printf("Vuelva a ingresar\n");
				}
         }
		}
}