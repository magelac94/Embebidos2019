
/*** BeginHeader */
#define STDIO_ENABLE_LONG_STRINGS

// Definicion de estructuras

//char bufferText[512];


enum opcionMenu {
	OPCION_0 = 0,
	OPCION_1,
	OPCION_2,
	OPCION_3,
	OPCION_4,
	OPCION_5,
	OPCION_6,
	OPCION_7
};

enum tipoUI {
	CONSOLA = 0,
	TCP
};


/*** EndHeader */

/*** BeginHeader enviar_a_ui */
void enviar_a_ui(enum tipoUI interfazAUsar, char* buffer_envio, tcp_Socket* un_tcp_socket );
/*** EndHeader */
void enviar_a_ui(enum tipoUI interfazAUsar, char* buffer_envio, tcp_Socket* un_tcp_socket ){

   auto int bytes_enviados, i;

	switch(interfazAUsar){
		case( CONSOLA ):
			printf( "%s", buffer_envio );
			break;

		case ( TCP ):
         /* Esta funcion escribe en el buffer del socket tcp hasta el largo
			de buffer_envio
			*/
			bytes_enviados=sock_puts( un_tcp_socket, buffer_envio);
			if(bytes_enviados>0) {
	         for ( i = 0; i < bytes_enviados; i++ ){
	            buffer_envio[i] = ' ';
	         }
			}
			break;

		default:
			printf( "ERROR DE SISTEMA: No existe la interfazAUsar elegida. Vea funcion enviar_a_ui" ); //EL ERROR SOLO SALE EN LA CONSOLA
			break;
	}
}

/*** BeginHeader obtener_de_ui */
void obtener_de_ui( enum tipoUI interfazAUsar, char* buffer_recepcion, tcp_Socket* un_tcp_socket );
/*** EndHeader */
void obtener_de_ui( enum tipoUI interfazAUsar, char* buffer_recepcion, tcp_Socket* un_tcp_socket ){
	//int i;
   auto int bytes_leidos;
 /*  for ( i = 0; i < TAMANIO_BUFFER_LE; i++ ){
			buffer_recepcion[i] = ' ';
			//buffer_envio[i] = ' ';
		}*/


	switch( interfazAUsar ){
		case( CONSOLA ):
		 //	*temp = getchar();    // espero valor
			gets(buffer_recepcion);
			printf("\n NUMERO INGRESADO   .....>  %s\n", buffer_recepcion );
			break;

		case ( TCP ):
			/* Esta funcion lee del buffer del socket tcp hasta el lago de
			buffer_recepcion - 1 y lo guarda en buffer_recepcion. Si no lo puede llenar
			lee lo que hay y retorna */
			while(tcp_tick(&un_tcp_socket)){


				bytes_leidos=sock_fastread( un_tcp_socket, buffer_recepcion, 521);
				if(bytes_leidos>0) {
					buffer_recepcion[bytes_leidos]=0; // Terminamos la cadena del string
					break;
				}
				OSTimeDlyHMSM(0,0,0,100);
			}
         break;

		default:
			printf( "\nERROR DE SISTEMA: No existe la interfazAUsar elegida. Vea funcion obtener_de_ui" ); //aca hay que manejar bien lo que pasa al fallar
			break;
	}
}



/*** BeginHeader MENU_mostrarMenuPrincipal */
void MENU_mostrarMenuPrincipal( enum tipoUI interfazAUsar, char* buffer_envio, tcp_Socket* un_tcp_socket );
/*** EndHeader */


void MENU_mostrarMenuPrincipal( enum tipoUI interfazAUsar, char* buffer_envio, tcp_Socket* un_tcp_socket ){
	//ClearScreen( interfazAUsar );
	// Metemos en el buffer el texto formateado
	sprintf( buffer_envio,\
"\n   Elija una opcion\n\
----------------------------------------\n\
1 - Fijar la hora del reloj\n\
2 - Consultar la hora del reloj\n\
3 - Agregar evento del calendario\n\
4 - Quitar evento del calendario\n\
5 - Consultar lista de eventos activos\n\
6 - Consultar entradas analogicas\n\
7 - Salir\n \
>>" );
	// Mandamos el buffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, buffer_envio, un_tcp_socket);


}


/*** BeginHeader MENU_obtenerOpcion */
void MENU_obtenerOpcion( enum tipoUI interfazAUsar, char* buffer_recepcion, tcp_Socket *un_tcp_socket );
/*** EndHeader */
void MENU_obtenerOpcion( enum tipoUI interfazAUsar, char* buffer_recepcion, tcp_Socket *un_tcp_socket ){
	// Obtenemos la opcion del menu principal desde la UI deseada
	obtener_de_ui( interfazAUsar, buffer_recepcion, un_tcp_socket );
}


/*** BeginHeader MENU_pedirFechaHora */
void MENU_pedirFechaHora( struct tm* p_FechaHora, enum tipoUI interfazAUsar, tcp_Socket *un_tcp_socket, char * buffer_envio  );
/*** EndHeader */
void MENU_pedirFechaHora( struct tm* p_FechaHora, enum tipoUI interfazAUsar, tcp_Socket *un_tcp_socket, char * buffer_envio ){
//	char temp[10];
	int int_temp, i;
	auto int bytes_enviados;
	char aux[2];

	////// CONSULTA AÃ‘O
	// Metemos en el buffer el texto formateado
	sprintf(buffer_envio,"\n-------- CONFIGURACION: FIJAR HORA -------\n\n Ingrese el anio:");
	// Mandamos el buffer a la interfaz a usar

	enviar_a_ui( interfazAUsar, buffer_envio, un_tcp_socket);


	// Obtenemos la opcion de la UI deseada
	obtener_de_ui( interfazAUsar, aux, un_tcp_socket );
	// Convertimos a int y guardamos el dato
	int_temp = atoi( aux );


	printf("Fecha:-- : %d\n", int_temp);
	int_temp = ( int_temp - 1900 ); // char tm_year; 80-147 (1980-2047)
	p_FechaHora->tm_year = (char)int_temp;




	////// CONSULTA MES
	// Metemos en el buffer el texto formateado
	sprintf(buffer_envio,"\nIngrese el mes:");
	// Mandamos el buffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, buffer_envio, un_tcp_socket );
	// Obtenemos la opcion de la UI deseada
	obtener_de_ui( interfazAUsar, aux, un_tcp_socket );
	// Convertimos a int y guardamos el dato
	int_temp = atoi( aux );
	p_FechaHora->tm_mon = (char)int_temp;


	////// CONSULTA DIA
	// Metemos en el buffer el texto formateado
	sprintf(buffer_envio,"\nIngrese el dia:");
	// Mandamos el buffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, buffer_envio, un_tcp_socket  );
	// Obtenemos la opcion de la UI deseada
	obtener_de_ui( interfazAUsar, aux, un_tcp_socket );

	// Convertimos a int y guardamos el dato
	int_temp = atoi( aux );
	p_FechaHora->tm_mday = (char)int_temp;


	////// CONSULTA HORA
	// Metemos en el buffer el texto formateado
	sprintf(buffer_envio,"\nIngrese la hora:");
	// Mandamos el buffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, buffer_envio, un_tcp_socket  );
	// Obtenemos la opcion de la UI deseada
	obtener_de_ui( interfazAUsar, aux, un_tcp_socket );

	// Convertimos a int y guardamos el dato
	int_temp = atoi( aux );
	p_FechaHora->tm_hour = (char)int_temp;


	////// CONSULTA MINUTO
	// Metemos en el buffer el texto formateado
	sprintf(buffer_envio,"\nIngrese el minuto:");
	// Mandamos el buffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, buffer_envio, un_tcp_socket  );
	// Obtenemos la opcion de la UI deseada
	obtener_de_ui( interfazAUsar, aux, un_tcp_socket  );

	// Convertimos a int y guardamos el dato
	int_temp = atoi( aux );
	p_FechaHora->tm_min = (char)int_temp;


	// Seteamos segundos en cero
	p_FechaHora->tm_sec = 0x00;

}


/*** BeginHeader MENU_printFechaHora */
void MENU_printFechaHora ( struct tm* p_FechaHora, enum tipoUI interfazAUsar, tcp_Socket* un_tcp_socket, char* buffer_envio );
/*** EndHeader */
// Imprime la fecha y la hora de una estructura tm
void MENU_printFechaHora ( struct tm* p_FechaHora, enum tipoUI interfazAUsar, tcp_Socket* un_tcp_socket, char* buffer_envio ){
	int dia, mes, anio, hora, minuto;
	char aux[2];

	anio = (int)p_FechaHora->tm_year;
	anio = anio + 1900;
	mes = (int)p_FechaHora->tm_mon;
	dia = (int)p_FechaHora->tm_mday;
	hora = (int)p_FechaHora->tm_hour;
	minuto = (int)p_FechaHora->tm_min;

	if ( mes < 10 ){
		if ( dia < 10){
			if ( hora < 10 ){
				if ( minuto < 10 ){
					sprintf( buffer_envio,"\nFecha: 0%u/0%u/%u\nHora: 0%u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( buffer_envio,"\nFecha: 0%u/0%u/%u\nHora: 0%u:%u", dia, mes, anio, hora, minuto);
				}
			} else {
				if ( minuto < 10 ){
					sprintf( buffer_envio,"\nFecha: 0%u/0%u/%u\nHora: %u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( buffer_envio,"\nFecha: 0%u/0%u/%u\nHora: %u:%u", dia, mes, anio, hora, minuto);
				}
			}
		} else {
			if ( hora < 10 ){
				if ( minuto < 10 ){
					sprintf( buffer_envio,"\nFecha: %u/0%u/%u\nHora: 0%u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( buffer_envio,"\nFecha: %u/0%u/%u\nHora: 0%u:%u", dia, mes, anio, hora, minuto);
				}
			} else {
				if ( minuto < 10 ){
					sprintf( buffer_envio,"\nFecha: %u/0%u/%u\nHora: %u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( buffer_envio,"\nFecha: %u/0%u/%u\nHora: %u:%u", dia, mes, anio, hora, minuto);
				}
			}
		}
	} else {
		if ( dia < 10){
			if ( hora < 10 ){
				if ( minuto < 10 ){
					sprintf( buffer_envio,"\nFecha: 0%u/%u/%u\nHora: 0%u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( buffer_envio,"\nFecha: 0%u/%u/%u\nHora: 0%u:%u", dia, mes, anio, hora, minuto);
				}
			} else {
				if ( minuto < 10 ){
					sprintf( buffer_envio,"\nFecha: 0%u/%u/%u\nHora: %u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( buffer_envio,"\nFecha: 0%u/%u/%u\nHora: %u:%u", dia, mes, anio, hora, minuto);
				}
			}
		} else {
			if ( hora < 10 ){
				if ( minuto < 10 ){
					sprintf( buffer_envio,"\nFecha: %u/%u/%u\nHora: 0%u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( buffer_envio,"\nFecha: %u/%u/%u\nHora: 0%u:%u", dia, mes, anio, hora, minuto);
				}
			} else {
				if ( minuto < 10 ){
					sprintf( buffer_envio,"\nFecha: %u/%u/%u\nHora: %u:0%u", dia, mes, anio, hora, minuto);
				} else {
					sprintf( buffer_envio,"\nFecha: %u/%u/%u\nHora: %u:%u", dia, mes, anio, hora, minuto);
				}
			}
		}
	}
	// Mandamos el buffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, buffer_envio, un_tcp_socket );
	if (interfazAUsar == CONSOLA){
		gets(aux);
	}
}


/*** BeginHeader MENU_consultarHora */
void MENU_consultarHora( enum tipoUI interfazAUsar,tcp_Socket* echo_socket);
/*** EndHeader */
void MENU_consultarHora( enum tipoUI interfazAUsar,tcp_Socket* echo_socket ){
	char bufferText[512];
//	ClearScreen( interfazAUsar );

	// Metemos en el buffer el texto formateado
	sprintf(bufferText, "\n\n-------- CONSULTAR HORA ACTUAL -------\n\n");
	// Mandamos el buffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, bufferText, echo_socket);
}


/*** BeginHeader MENU_pedirDatosEvento */
void MENU_pedirDatosEvento( Event *p_Evento, struct tm *p_FechaHora, enum tipoUI interfazAUsar, tcp_Socket* echo_socket, char* buffer );
/*** EndHeader */
void MENU_pedirDatosEvento( Event *p_Evento, struct tm *p_FechaHora, enum tipoUI interfazAUsar, tcp_Socket* echo_socket, char * buffer ){

	//char opcion[5];
	int int_opcion;
	unsigned long timestamp;

//	ClearScreen( interfazAUsar );

	// Metemos en el buffer el texto formateado
	sprintf( buffer, "\n\n-------- AGREGAR EVENTO --------------\n\n" );
	// Mandamos el buffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, buffer, echo_socket );

	while(1){
		// Metemos en el buffer el texto formateado
		sprintf( buffer, "\nTipo de Evento (1-Encender o 2-Apagar): ");
		// Mandamos el buffer a la interfaz a usar
		enviar_a_ui( interfazAUsar, buffer, echo_socket );
		// Obtenemos la opcion de la UI deseada
		obtener_de_ui( interfazAUsar, buffer, echo_socket);

		// Convertimos a int
		int_opcion = atoi( buffer );
		// Validacion de tipo evento
		if ( int_opcion < 1 || int_opcion > 2 ){
			// MENSAJE DE ERROR
			// Metemos en el buffer el texto formateado
			sprintf( buffer, "\nERROR: Debe elegir 1 o 2. Volver a ingresar\n" );
			// Mandamos el buffer a la interfaz a usar
			enviar_a_ui( interfazAUsar, buffer, echo_socket  );
		}
		else{
			// Fijo el tipo de evento
			p_Evento->command = buffer[0];

			// PIDO EL PROXIMO DATO. NRO DE LED
			// Metemos en el buffer el texto formateado
			sprintf( buffer, "\nLed a Encender(0-7): ");
			// Mandamos el buffer a la interfaz a usar
			enviar_a_ui( interfazAUsar, buffer, echo_socket );
			// Obtenemos la opcion de la UI deseada
			obtener_de_ui( interfazAUsar, buffer, echo_socket);

			// Convertimos a int
			int_opcion = atoi( buffer );
			// Validacion de nro de led
			if ( int_opcion < 0 || int_opcion > 7){
				// Metemos en el buffer el texto formateado
				sprintf( buffer,"\nERROR: Debe elegir un numero entre 0 y 7. Volver a ingresar\n");
				// Mandamos el buffer a la interfaz a usar
				enviar_a_ui( interfazAUsar, buffer, echo_socket );
			}
			else{
				// Fijo el nro de led
				p_Evento->param = buffer[0];

				// PIDO EL SIGUIENTE DATO. FECHA Y HORA
				MENU_pedirFechaHora( p_FechaHora, interfazAUsar, echo_socket, buffer);
				MENU_printFechaHora( p_FechaHora, interfazAUsar, echo_socket, buffer );
				timestamp = mktime( p_FechaHora );
				p_Evento->time = timestamp;
				return;
			}
		}
	}
}


/*** BeginHeader MENU_eliminarEvento */
int MENU_eliminarEvento( enum tipoUI interfazAUsar, tcp_Socket* echo_socket, char * buffer );
/*** EndHeader */
int MENU_eliminarEvento( enum tipoUI interfazAUsar, tcp_Socket* echo_socket, char * buffer ){ //Esta funcion anda solo por consola el listado. Falta adaptarla
	char aux[2];
	char numEvento[5];
	int int_numEvento;

	//ClearScreen( interfazAUsar );

	while(1){
		// Metemos en el buffer el texto formateado
		sprintf( buffer,"\n\n-------- ELIMINAR EVENTO -------\n\nPara eliminar ingrese numero de evento (0 para listar los eventos): \n");
		// Mandamos el buffer a la interfaz a usar
		enviar_a_ui( interfazAUsar, buffer, echo_socket);
		// Obtenemos la opcion de la UI deseada
		obtener_de_ui( interfazAUsar, buffer, echo_socket );

		// Convertimos a int
		int_numEvento = atoi( numEvento );
		if ( int_numEvento == OPCION_0 ){
			EVENTOS_listarEventos( buffer );

		}
		else{
			if ( int_numEvento > 0 && int_numEvento <= MAX_EVENTS ){
				int_numEvento = int_numEvento - 1;
				printf( "\nMENU_eliminarEvento int a devolver: %d", int_numEvento );
				if (interfazAUsar == CONSOLA){
					gets(aux);
				}
				return int_numEvento;
			}
			else{
				printf("\nNumero de Evento Incorrecto");
				if (interfazAUsar == CONSOLA){
					gets(aux);
				}
			}
		}

	}
}


/*** BeginHeader MENU_consultarEventos */
void MENU_consultarEventos( enum tipoUI interfazAUsar,tcp_Socket *echo_socket );
/*** EndHeader */
void MENU_consultarEventos( enum tipoUI interfazAUsar,tcp_Socket *echo_socket ){
	char aux[5];
	char bufferText[512];
	//ClearScreen( interfazAUsar );

	// Metemos en el buffer el texto formateado
	sprintf( bufferText, "\n\n-------- LISTAR EVENTOS -------\n" );
	// Mandamos el buffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, bufferText, echo_socket );
	if (interfazAUsar == CONSOLA){
		gets(aux);
	}
}

/*** BeginHeader MENU_pedirEntradaAnalogica */
void MENU_pedirEntradaAnalogica( enum tipoUI interfazAUsar, char *temp, tcp_Socket *echo_socket, char * buffer );
/*** EndHeader */
void MENU_pedirEntradaAnalogica( enum tipoUI interfazAUsar, char *temp, tcp_Socket *echo_socket, char * buffer ){
	char aux[2];
	ClearScreen( interfazAUsar );

	while(1){
		// Metemos en el buffer el texto formateado
		sprintf( buffer,"\n\n-------- Entrada Analogica -------\n\n\nIngrese entrada analogica (0 o 1): \n");
		// Mandamos el buffer a la interfaz a usar
		enviar_a_ui( interfazAUsar, buffer, echo_socket);
		// Obtenemos la opcion de la UI deseada
		obtener_de_ui(interfazAUsar, temp, echo_socket );
		if ( *temp == '0' || *temp == '1' ){
			return;
		}
		sprintf( buffer,"\n\n-- Valor incorrecto, ingrese nuevamente --\n\n");
		enviar_a_ui( interfazAUsar, buffer, echo_socket );
	}
	if (interfazAUsar == CONSOLA){
		gets(aux);
	}
}

/*** BeginHeader MENU_mostrarEntradaAnalogica */
void MENU_mostrarEntradaAnalogica( enum tipoUI interfazAUsar, int *temp, tcp_Socket *echo_socket);
/*** EndHeader */
void MENU_mostrarEntradaAnalogica( enum tipoUI interfazAUsar, int *temp, tcp_Socket *echo_socket){
	char aux[2];
	char bufferText[512];
	ClearScreen( interfazAUsar );

	// Metemos en el buffer el texto formateado
	sprintf( bufferText,"\n\nEl valor de la entrada analogica es: %u\n", *temp);
	// Mandamos el buffer a la interfaz a usar
	enviar_a_ui( interfazAUsar, bufferText, echo_socket);
	if (interfazAUsar == CONSOLA){
		gets(aux);
	}
}