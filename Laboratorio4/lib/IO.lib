/*** BeginHeader */

#define INPUT_DIR				0
#define OUTPUT_DIR				1

#define STX 					0x02
#define ETX 					0x03

#define CINBUFSIZE 				127
#define COUTBUFSIZE 			127

#define PIC_COM_TIMEOUT			100
#define PIC_MSG_LENGTH		29
#define PIC_PROTOCOL_BAUDRATE	9600

enum portName
{
	PORT_UNDEF = -1,
	PORT_A,
	PORT_B,
	PORT_C,
	PORT_D,
	PORT_E,
	PORT_F
};

enum bitNumber
{
	BIT_UNDEF = -1,
	BIT_0,
	BIT_1,
	BIT_2,
	BIT_3,
	BIT_4,
	BIT_5,
	BIT_6,
	BIT_7
};
/*** EndHeader */

/*** BeginHeader HW_init */
void HW_init( void );
/*** EndHeader */
void HW_init( void )
{
	// PORT A
	WrPortI(SPCR, &SPCRShadow, 0x084);		//PortA (Salidas)

	// PORT B
	BitWrPortI(PBDDR, &PBDDRShadow, INPUT_DIR, BIT_2); 	//Entrada 0
	BitWrPortI(PBDDR, &PBDDRShadow, INPUT_DIR, BIT_3); 	//Entrada 1
	BitWrPortI(PBDDR, &PBDDRShadow, INPUT_DIR, BIT_4); 	//Entrada 2
	BitWrPortI(PBDDR, &PBDDRShadow, INPUT_DIR, BIT_5); 	//Entrada 3

	// PORT F
	BitWrPortI(PFDDR, &PFDDRShadow, INPUT_DIR, BIT_4); 	//Entrada 4
	BitWrPortI(PFDDR, &PFDDRShadow, INPUT_DIR, BIT_5); 	//Entrada 5
	BitWrPortI(PFDDR, &PFDDRShadow, INPUT_DIR, BIT_6); 	//Entrada 6
	BitWrPortI(PFDDR, &PFDDRShadow, INPUT_DIR, BIT_7); 	//Entrada 7

	// PORT E
	BitWrPortI(PEDDR, &PEDDRShadow, OUTPUT_DIR, BIT_5); //Entrada 5

	// Puerto Serie PIC
	serCopen(PIC_PROTOCOL_BAUDRATE);
}

/*** BeginHeader IO_getInput */
char IO_getInput( enum portName p_port, enum bitNumber p_pin );
/*** EndHeader */
char IO_getInput( enum portName p_port, enum bitNumber p_pin )
{
	enum portName port;

	switch( p_port )
	{
		case( PORT_A ):
			port = PADR;
			break;
		case( PORT_B ):
			port = PBDR;
			break;
		case( PORT_C ):
			port = PCDR;
			break;
		case( PORT_D ):
			port = PDDR;
			break;
		case( PORT_E ):
			port = PEDR;
			break;
		case( PORT_F ):
			port = PFDR;
			break;
	}

	return (char)BitRdPortI( port, p_pin );
}

/*** BeginHeader ASCIIHextoNum */
char ASCIIHextoNum( char input );
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
ASCIIHextoNum                  <Func_IO.LIB>

SYNTAX:        char ASCIIHextoNum( char input )
PARAMETER1:		caracteres ASCII (de 0 a F)

RETURNS: 	El numero entero equivalente
			-1 si el parametro1 no era un caracter valido hexadecimal

DESCRIPTION:   Convierte un ASCII (de 0 a F) en numero entero
END DESCRIPTION **********************************************************/
char ASCIIHextoNum( char input )
{
	if( input >= '0' && input <= '9' )
	{
		return (input-'0');
	}
	else if( input >= 'A' && input <= 'F')
	{
		return (input + 10 - 'A');
	}
	else
	{
		return -1;
	}
}

/*** BeginHeader IO_setOutput */
void IO_setOutput( enum portName p_port, enum bitNumber p_pin, unsigned char p_state);
/*** EndHeader */
void IO_setOutput( enum portName p_port, enum bitNumber p_pin, unsigned char p_state )
{
	char *shadowPtr;
	enum portName port;

	switch( p_port )
	{
		case( PORT_A ):
			port = PADR;
			shadowPtr = &PADRShadow;
			break;
		case( PORT_B ):
			port = PBDR;
			shadowPtr = &PBDRShadow;
			break;
		case( PORT_C ):
			port = PCDR;
			shadowPtr = &PCDRShadow;
			break;
		case( PORT_D ):
			port = PDDR;
			shadowPtr = &PDDRShadow;
			break;
		case( PORT_E ):
			port = PEDR;
			shadowPtr = &PEDRShadow;
			break;
		case( PORT_F ):
			port = PFDR;
			shadowPtr = &PFDRShadow;
			break;
	}

	BitWrPortI( port, shadowPtr, p_state, p_pin );
}

/*** BeginHeader IO_getAnalogInput */
int IO_getAnalogInput( int channel );
/*** EndHeader */
int IO_getAnalogInput( int channel )
{
	unsigned long time;
	char crc, preg[5], datos[PIC_MSG_LENGTH];
	int valor, i;

	if(channel > 1 || channel < 0)	//Entrada pedida fuera de rango.
		return -1;

	serCrdFlush();
	serCwrFlush();

	preg[0] = STX;
	preg[1] = '0';
	preg[2] = '1';
	preg[3] = ETX;
	preg[4] = preg[0] + preg[1] + preg[2] + preg[3]; // CRC

	serCwrite(&preg,5); // le mandamos la pregunta al puerto C

	serCrdFlush();      // inicializa en 0 el buffer de entrada C

	time = MS_TIMER + PIC_COM_TIMEOUT;
	while( (serCrdUsed() != PIC_MSG_LENGTH) && ((long)(MS_TIMER-time) < 0));
	if( serCrdUsed() != PIC_MSG_LENGTH)
	{
		return -2;
	}

	serCread(datos, PIC_MSG_LENGTH, 500);

	//Confirmo CRC
	crc = 0;
	for( i=0; i<PIC_MSG_LENGTH-1; i++ )
	{
		crc += datos[i];
	}
	if( crc != datos[PIC_MSG_LENGTH-1] )
	{
		datos[28] = '\0';
		printf(datos);		//devuelvo el mensaje para analizar
		printf("\n");
		return -3;
	}

	valor = ASCIIHextoNum(datos[3+3*channel])<<8;
	valor += ASCIIHextoNum(datos[4+3*channel])<<4;
	valor += ASCIIHextoNum(datos[5+3*channel]);

	return valor;
}